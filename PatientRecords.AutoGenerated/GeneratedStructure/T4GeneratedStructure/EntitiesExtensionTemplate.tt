<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="PatientRecords.AutoGenerated.HelperClasses" #>
<#@ output extension=".cs" #>
using PatientRecords.BLLayer.Mapping;
using PatientRecords.BLLayer.QueryServices;
using PatientRecords.BLLayer.UpdateServices;
using PatientRecords.BLLayer.Validating;
using PatientRecords.DataLayer.Data.Repositries;
using Microsoft.Extensions.DependencyInjection;
using PatientRecords.DataLayer.Data.Repositries.Interfaces;
using PatientRecords.BLLayer.Mapping.Interfaces;
using PatientRecords.BLLayer.QueryServices.Interfaces;
using PatientRecords.BLLayer.UpdateServices.Interfaces;
using PatientRecords.BLLayer.Validating.Interfaces;

namespace <#= NameSpace #>
{
 
    public static class <#= ExtensiontName #>
    {

        public static void AddEntityServicesToConfigure(this IServiceCollection services)
        {
            AddRepositriesToScope(services);
            AddMappingToScope(services);
            AddValidatingToScope(services);
            AddQueryServicesToScope(services);
            AddUpdateServicesToScope(services);
        }

        private static void AddRepositriesToScope(IServiceCollection services)
        {

       <# foreach (Type type in Entities) { #>
    services.AddScoped<I<#= type.Name #>Repositry, <#= type.Name #>Repositry>();
       <# } #>

        }

        private static void AddValidatingToScope(IServiceCollection services)
        {

       <# foreach (Type type in Entities) { #>
    services.AddScoped<I<#= type.Name #>Validating, <#= type.Name #>Validating>();
       <# } #>

        }

        private static void AddMappingToScope(IServiceCollection services)
        {

       <# foreach (Type type in Entities) { #>
    services.AddScoped<I<#= type.Name #>Mapping, <#= type.Name #>Mapping>();
       <# } #>

        }

        private static void AddUpdateServicesToScope(IServiceCollection services)
        {

       <# foreach (Type type in Entities) { #>
    services.AddScoped<I<#= type.Name #>UpdateService, <#= type.Name #>UpdateService>();
       <# } #>

        }

        private static void AddQueryServicesToScope(IServiceCollection services)
        {

       <# foreach (Type type in Entities) { #>
    services.AddScoped<I<#= type.Name #>QueryService, <#= type.Name #>QueryService>();
       <# } #>

        }
    }
}
