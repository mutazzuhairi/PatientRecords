using System;
using System.IO;
using System.Linq;
using System.Reflection;
using PatientRecords.AutoGenerated.GeneratedStructure.ClassesGeneratedStructure;
using PatientRecords.AutoGenerated.HelperClasses;
using PatientRecords.AutoGenerated.HelperClasses.Interfaces;

namespace PatientRecords.AutoGenerated
{
    public class Program
    {
        private const string BL_PROJECT_NAME = "PatientRecords.BLLayer";
        private const string GENERATED_FOLDER_NAME = "Generated";

        private static void Main()
        {

            Assembly assembly = Assembly.Load("PatientRecords.DataLayer"); 
            foreach (Type type in assembly.GetTypes().Where(s=>s.Namespace== "PatientRecords.DataLayer.Data.Entities"))
            {
                TableInfo tableInfo = new TableInfo()
                {
                    Type = type,
                    Properties = type.GetProperties().Where(s => s.DeclaringType.Name == type.Name).ToArray()

                };

                GenerateEntityDTO(type,tableInfo);
                GenerateEntityView(type, tableInfo);
                GenerateEntityIQueryService(type, tableInfo);
                GenerateEntityQueryService(type, tableInfo);
            }
        
        }

        private static void GenerateEntityDTO(Type type,TableInfo tableInfo)
        {
            var folderName = "EntityDTOs";
            var fileConvention = "DTO.Generated.cs";
            ITextTemplate template = new EntitiesDTOTemplate(BL_PROJECT_NAME + "." + folderName, tableInfo);
            string startupPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             GENERATED_FOLDER_NAME,
                                             type.Name + fileConvention);
            System.IO.File.WriteAllText(startupPath, template.TransformText().RemoveGarbageLinesFromString());
        }

        private static void GenerateEntityView(Type type, TableInfo tableInfo)
        {
            var folderName = "EntityViews";
            var fileConvention = "View.Generated.cs";
            ITextTemplate template = new EntitiesViewTemplate(BL_PROJECT_NAME + "." + folderName, tableInfo);
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             GENERATED_FOLDER_NAME,
                                             type.Name + fileConvention);
            System.IO.File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
        }

        private static void GenerateEntityQueryService(Type type, TableInfo tableInfo)
        {
            var folderName = "QueryServices";
            var fileConvention = "QueryService.cs";
            ITextTemplate template = new EntitiesQueryServiceTemplate(BL_PROJECT_NAME + "." + folderName, tableInfo);
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                System.IO.File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityIQueryService(Type type, TableInfo tableInfo)
        {
            var folderName = Path.Combine("QueryServices","Interfaces");
            var firstFileConvention = "I";
            var lastFileConvention = "QueryService.cs";
            ITextTemplate template = new EntitiesIQueryServiceTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\","."), tableInfo);
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                System.IO.File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }
    }
}
