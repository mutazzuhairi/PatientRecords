using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using AutoMapper;
using Microsoft.AspNetCore.Http;
using PatientRecords.AutoGenerated.GeneratedStructure.ClassesGeneratedStructure;
using PatientRecords.AutoGenerated.HelperClasses;
using PatientRecords.AutoGenerated.HelperClasses.Interfaces;
using PatientRecords.BLLayer.BLUtilities.HelperServices;
using PatientRecords.BLLayer.BLUtilities.HelperServices.Interfaces;
using PatientRecords.DataLayer.DataUtilities.DBContext;
using PatientRecords.Web.WebUtilities.HelperServices.Interfaces;

namespace PatientRecords.AutoGenerated
{
    public class Program
    {
        private const string BL_PROJECT_NAME = "PatientRecords.BLLayer";
        private const string DATA_PROJECT_NAME = "PatientRecords.DataLayer";
        private const string WEB_PROJECT_NAME = "PatientRecords.Web";
        private const string GENERATED_FOLDER_NAME = "Generated";

        private static void Main()
        {

            Assembly assembly = Assembly.Load("PatientRecords.DataLayer");
            var entities = assembly.GetTypes().Where(s => s.Namespace == "PatientRecords.DataLayer.Data.Entities").ToList();

            GenerateEntitiesContext(entities, Path.Combine("DataUtilities", "DBContext"));

            foreach (Type type in entities)
            {
                TableInfo tableInfo = new TableInfo()
                {
                    Type = type,
                    Properties = type.GetProperties().Where(s => s.DeclaringType.Name == type.Name).ToArray(),
                    Context = typeof(MainContext),
                    CommonServices = typeof(ICommonServices),
                    ServiceBuildException = typeof(IServiceBuildException),
                    Mapper = typeof(IMapper),
                    PaginationHelperServices = typeof(IPaginationHelper),
                    UriService = typeof(IUriService),
                    HttpContextAccessor = typeof(IHttpContextAccessor),
                    ApiExceptionBuilder = typeof(IApiExceptionBuilder)
                };

                GenerateEntityConfiguration(type, tableInfo, Path.Combine("Data", "Configuration"));
                GenerateEntityIRepositry(type, tableInfo, Path.Combine("Data", "Repositries", "Interfaces"));
                GenerateEntityRepositry(type, tableInfo, Path.Combine("Data", "Repositries"));
                GenerateEntityDTO(type,tableInfo, "EntityDTOs");
                GenerateEntityView(type, tableInfo, "EntityViews");
                GenerateEntityIQueryService(type, tableInfo, Path.Combine("QueryServices", "Interfaces"));
                GenerateEntityQueryService(type, tableInfo, "QueryServices");
                GenerateEntityIMapping(type, tableInfo, Path.Combine("Mapping", "Interfaces"));
                GenerateEntityMapping(type, tableInfo, "Mapping");
                GenerateEntityIValidating(type, tableInfo, Path.Combine("Validating", "Interfaces"));
                GenerateEntityValidating(type, tableInfo, "Validating");
                GenerateEntityIUpdateService(type, tableInfo, Path.Combine("UpdateServices", "Interfaces"));
                GenerateEntityUpdateService(type, tableInfo, "UpdateServices");
                GenerateEntityControllerDTO(type, tableInfo, Path.Combine("Controllers", "Basics", "DTOs"));
                GenerateEntityControllerView(type, tableInfo, Path.Combine("Controllers", "Basics", "Views"));


            }

            GenerateEntitiesExtension(entities, Path.Combine("BLUtilities", "Extensions"));

        }

        private static void GenerateEntityDTO(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "DTO.Generated.cs";
            string startupPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             GENERATED_FOLDER_NAME,
                                             type.Name + fileConvention);
            ITextTemplate template = new EntitiesDTOTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
            File.WriteAllText(startupPath, template.TransformText().RemoveGarbageLinesFromString());
        }

        private static void GenerateEntityView(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "View.Generated.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             GENERATED_FOLDER_NAME,
                                             type.Name + fileConvention);
            ITextTemplate template = new EntitiesViewTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
            File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
        }

        private static void GenerateEntityQueryService(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "QueryService.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesQueryServiceTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityIQueryService(Type type, TableInfo tableInfo, string folderName)
        {
            var firstFileConvention = "I";
            var lastFileConvention = "QueryService.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesIQueryServiceTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityIRepositry(Type type, TableInfo tableInfo, string folderName)
        {
            var firstFileConvention = "I";
            var lastFileConvention = "Repositry.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             DATA_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesIRepositryTemplate(DATA_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityRepositry(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "Repositry.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             DATA_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesRepositryTemplate(DATA_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityConfiguration(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "Configuration.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             DATA_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesConfigurationTemplate(DATA_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityIUpdateService(Type type, TableInfo tableInfo, string folderName)
        {
            var firstFileConvention = "I";
            var lastFileConvention = "UpdateService.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesIUpdateServiceTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityUpdateService(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "UpdateService.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesUpdateServiceTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }


        private static void GenerateEntityIMapping(Type type, TableInfo tableInfo, string folderName)
        {
            var firstFileConvention = "I";
            var lastFileConvention = "Mapping.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesIMappingTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityMapping(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "Mapping.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesMappingTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityIValidating(Type type, TableInfo tableInfo, string folderName)
        {
            var firstFileConvention = "I";
            var lastFileConvention = "Validating.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             firstFileConvention + type.Name + lastFileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesIValidatingTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityValidating(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "Validating.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesValidatingTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntitiesContext(List<Type> entities, string folderName)
        {
            var fileName = "MainContext.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             DATA_PROJECT_NAME,
                                             folderName,
                                             fileName);
            ITextTemplate template = new EntitiesContextTemplate(DATA_PROJECT_NAME + "." + folderName.Replace("\\", "."),
                                                                 "MainContext",
                                                                 "Configuration", 
                                                                 entities);
            File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
        }

        private static void GenerateEntityControllerDTO(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "Controller.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             WEB_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesControllerDTOTemplate(WEB_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntityControllerView(Type type, TableInfo tableInfo, string folderName)
        {
            var fileConvention = "ViewController.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             WEB_PROJECT_NAME,
                                             folderName,
                                             type.Name + fileConvention);
            if (!File.Exists(fullPath))
            {
                ITextTemplate template = new EntitiesControllerViewTemplate(WEB_PROJECT_NAME + "." + folderName.Replace("\\", "."), tableInfo);
                File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
            }
        }

        private static void GenerateEntitiesExtension(List<Type> entities, string folderName)
        {
            var fileName = "EntityExtensions.cs";
            string fullPath = Path.Combine(Directory.GetParent(System.IO.Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName,
                                             BL_PROJECT_NAME,
                                             folderName,
                                             fileName);
            ITextTemplate template = new EntitiesExtensionTemplate(BL_PROJECT_NAME + "." + folderName.Replace("\\", "."),
                                                                 "EntityExtensions",
                                                                  entities);
            File.WriteAllText(fullPath, template.TransformText().RemoveGarbageLinesFromString());
        }
    }
}
